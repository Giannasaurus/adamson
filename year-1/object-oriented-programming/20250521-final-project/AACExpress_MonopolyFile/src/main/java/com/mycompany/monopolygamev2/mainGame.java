/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.monopolygamev2;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.*;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author ysabelle
 */
public class mainGame extends javax.swing.JFrame {
    private final GameFlow gameFlow;
    private JLabel playerPawn;
    private final Map<Player, JLabel> playerPawns = new HashMap<>();
    private JPanel[] boardTiles = new JPanel[36]; //for tiles of the board
    private final int[] boardIndexMap = { //to highlight the boxes on the edge
    0, 1, 2, 3, 4, 5,
    11, 17, 23, 29, 35, 34, 33, 32, 31, 30,
    24, 18, 12, 6
};
    /**
     * Creates new form mainGame
     */
    public mainGame() {
        initComponents();
        List<String> names = new ArrayList<>(); //to make a new player add here
        names.add("Player 1");
        names.add("Player 2");

        gameFlow = new GameFlow(names, this::appendDialogue);
        for (Player player : gameFlow.getPlayers()) {
            String emoji = player.getName().equals("Player 1") ? "üèÉ" : "ü§∏"; // use unique emoji for each player
            JLabel pawnLabel = new JLabel(emoji);
            pawnLabel.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 32));
            pawnLabel.setHorizontalAlignment(JLabel.CENTER);
            pawnLabel.setVerticalAlignment(JLabel.CENTER);
            playerPawns.put(player, pawnLabel);
        }
        panelGameBoard.setLayout(new GridLayout(6, 6));
        for (int i = 0; i < 36; i++) { //I did a for loop rather than manually code each tile (which is wrong rip)
            JPanel tilePanel = new JPanel();
            tilePanel.setLayout(new GridLayout(2, 1));
            tilePanel.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
            if (isGameTile(i)) {
                tilePanel.setBackground(new Color(173, 216, 230)); // Outer path tiles
                int gameTileIndex = getGameTileIndex(i); //
                String name = gameFlow.getTileAt(gameTileIndex).getName();
                JLabel label = new JLabel(name, JLabel.CENTER);
                label.setFont(new Font("Arial", Font.PLAIN, 16));
                tilePanel.add(label);
            } else {
                tilePanel.setBackground(Color.WHITE); // Inner tiles
                JLabel label = new JLabel("", JLabel.CENTER);
                tilePanel.add(label);
            }

            boardTiles[i] = tilePanel;
            panelGameBoard.add(tilePanel);
        }
        }
    private boolean isGameTile(int gridIndex) {
    for (int mapped : boardIndexMap) {
        if (mapped == gridIndex) return true;
    }
    return false;
}

private int getGameTileIndex(int gridIndex) {
    for (int i = 0; i < boardIndexMap.length; i++) {
        if (boardIndexMap[i] == gridIndex) return i;
    }
    return -1;
}
    private void movePawnsToTiles() {
    // Remove all pawns from all tiles
    for (JPanel tile : boardTiles) {
        tile.removeAll();
    }

    // Re-add tile labels
    for (int i = 0; i < 36; i++) {
        JPanel tile = boardTiles[i];
        tile.setLayout(new GridLayout(2, 1));

        if (isGameTile(i)) {
            int gameTileIndex = getGameTileIndex(i);
            String name = gameFlow.getTileAt(gameTileIndex).getName();
            JLabel label = new JLabel(name, JLabel.CENTER);
            label.setFont(new Font("Arial", Font.PLAIN, 16));
            tile.add(label);
        } else {
            tile.add(new JLabel(""));
        }
    }

    // Add each player's pawn to their position
    for (Player player : gameFlow.getPlayers()) {
        int tileIndex = player.getPosition();
        int gridIndex = boardIndexMap[tileIndex];
        JLabel pawnLabel = playerPawns.get(player);
        boardTiles[gridIndex].add(pawnLabel);
    }

    panelGameBoard.revalidate();
    panelGameBoard.repaint();
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelGameBoard = new javax.swing.JPanel();
        panelPlayerInfo = new javax.swing.JPanel();
        lblPlayerTurn = new javax.swing.JLabel();
        lblAllowanceDisplay = new javax.swing.JLabel();
        lblAllowance = new javax.swing.JLabel();
        lblClubs = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaOrganizationOwned = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaGameDialogue = new javax.swing.JTextArea();
        lblClubs1 = new javax.swing.JLabel();
        panelPlayerControl = new javax.swing.JPanel();
        dice1 = new javax.swing.JLabel();
        dice2 = new javax.swing.JLabel();
        btnRollDice = new javax.swing.JButton();
        btnBuy = new javax.swing.JButton();
        btnUpgrade = new javax.swing.JButton();
        btnEndTurn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 204, 255));

        javax.swing.GroupLayout panelGameBoardLayout = new javax.swing.GroupLayout(panelGameBoard);
        panelGameBoard.setLayout(panelGameBoardLayout);
        panelGameBoardLayout.setHorizontalGroup(
            panelGameBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 728, Short.MAX_VALUE)
        );
        panelGameBoardLayout.setVerticalGroup(
            panelGameBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 778, Short.MAX_VALUE)
        );

        panelPlayerInfo.setBackground(new java.awt.Color(102, 204, 255));

        lblPlayerTurn.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        lblPlayerTurn.setText("Player 1");

        lblAllowanceDisplay.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblAllowanceDisplay.setText("Allowance: ");

        lblAllowance.setText("$1500");

        lblClubs.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblClubs.setText("Organization/Clubs:");

        txtAreaOrganizationOwned.setEditable(false);
        txtAreaOrganizationOwned.setColumns(20);
        txtAreaOrganizationOwned.setFont(new java.awt.Font("Arial Hebrew", 0, 13)); // NOI18N
        txtAreaOrganizationOwned.setRows(5);
        jScrollPane1.setViewportView(txtAreaOrganizationOwned);

        txtAreaGameDialogue.setEditable(false);
        txtAreaGameDialogue.setColumns(20);
        txtAreaGameDialogue.setFont(new java.awt.Font("Arial Hebrew", 0, 13)); // NOI18N
        txtAreaGameDialogue.setRows(5);
        jScrollPane2.setViewportView(txtAreaGameDialogue);

        lblClubs1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblClubs1.setText("Game Flow");

        javax.swing.GroupLayout panelPlayerInfoLayout = new javax.swing.GroupLayout(panelPlayerInfo);
        panelPlayerInfo.setLayout(panelPlayerInfoLayout);
        panelPlayerInfoLayout.setHorizontalGroup(
            panelPlayerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPlayerInfoLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(panelPlayerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelPlayerInfoLayout.createSequentialGroup()
                        .addGroup(panelPlayerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPlayerInfoLayout.createSequentialGroup()
                                .addGroup(panelPlayerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblClubs1)
                                    .addGroup(panelPlayerInfoLayout.createSequentialGroup()
                                        .addComponent(lblPlayerTurn)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblAllowanceDisplay)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblAllowance)))
                                .addGap(12, 12, 12))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPlayerInfoLayout.createSequentialGroup()
                                .addComponent(lblClubs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(126, Short.MAX_VALUE))
        );
        panelPlayerInfoLayout.setVerticalGroup(
            panelPlayerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPlayerInfoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelPlayerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelPlayerInfoLayout.createSequentialGroup()
                        .addGroup(panelPlayerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPlayerTurn)
                            .addComponent(lblAllowanceDisplay)
                            .addComponent(lblAllowance))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblClubs)
                        .addGap(4, 4, 4)
                        .addComponent(lblClubs1)))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelPlayerControl.setBackground(new java.awt.Color(102, 204, 255));

        dice1.setText("Dice1");

        dice2.setText("Dice2");

        btnRollDice.setBackground(new java.awt.Color(204, 255, 255));
        btnRollDice.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        btnRollDice.setText("Roll Dice");
        btnRollDice.setToolTipText("");
        btnRollDice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRollDiceMouseClicked(evt);
            }
        });

        btnBuy.setBackground(new java.awt.Color(204, 255, 255));
        btnBuy.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        btnBuy.setText("Buy");
        btnBuy.setToolTipText("");
        btnBuy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBuyMouseClicked(evt);
            }
        });

        btnUpgrade.setBackground(new java.awt.Color(204, 255, 255));
        btnUpgrade.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        btnUpgrade.setText("Upgrade");
        btnUpgrade.setToolTipText("");
        btnUpgrade.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUpgradeMouseClicked(evt);
            }
        });

        btnEndTurn.setBackground(new java.awt.Color(204, 255, 255));
        btnEndTurn.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        btnEndTurn.setText("End Turn");
        btnEndTurn.setToolTipText("");
        btnEndTurn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEndTurnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelPlayerControlLayout = new javax.swing.GroupLayout(panelPlayerControl);
        panelPlayerControl.setLayout(panelPlayerControlLayout);
        panelPlayerControlLayout.setHorizontalGroup(
            panelPlayerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPlayerControlLayout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addGroup(panelPlayerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEndTurn, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpgrade, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRollDice, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelPlayerControlLayout.createSequentialGroup()
                        .addComponent(dice1)
                        .addGap(130, 130, 130)
                        .addComponent(dice2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelPlayerControlLayout.setVerticalGroup(
            panelPlayerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPlayerControlLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(panelPlayerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dice1)
                    .addComponent(dice2))
                .addGap(18, 18, 18)
                .addComponent(btnRollDice, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpgrade, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEndTurn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelGameBoard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelPlayerInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelPlayerControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelGameBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelPlayerInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelPlayerControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRollDiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRollDiceMouseClicked
        Player currentPlayer = gameFlow.getCurrentPlayer();
    if (currentPlayer.isBankrupt()) {
        txtAreaGameDialogue.append(currentPlayer.getName() + " is bankrupt and cannot take a turn.\n");
        // Automatically skip their turn without ending it manually
        gameFlow.endTurn();  // Skip the player's turn
        updatePlayerInfo();
        return;
    }

    // Roll dice and display the result
    int[] dice = gameFlow.rollDice();
int total = dice[0] + dice[1];

// Set dice label values
dice1.setText("Dice 1: " + dice[0]);
dice2.setText("Dice 2: " + dice[1]);
dice1.setHorizontalAlignment(JLabel.CENTER);
dice2.setHorizontalAlignment(JLabel.CENTER);
dice1.setFont(new Font("Arial", Font.BOLD, 16));
dice2.setFont(new Font("Arial", Font.BOLD, 16));

txtAreaGameDialogue.append(currentPlayer.getName() + " rolled " + dice[0] + " and " + dice[1] + " (Total: " + total + ")\n");
    gameFlow.movePlayer(total);
    updatePlayerInfo();
    btnRollDice.setEnabled(false);
    btnEndTurn.setEnabled(true);
    movePawnsToTiles();;
    }//GEN-LAST:event_btnRollDiceMouseClicked
    
    private void btnEndTurnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEndTurnMouseClicked
        gameFlow.endTurn(); 
        updatePlayerInfo();
        btnRollDice.setEnabled(true);
        btnEndTurn.setEnabled(false);
    }//GEN-LAST:event_btnEndTurnMouseClicked

    private void btnBuyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBuyMouseClicked
    Player currentPlayer = gameFlow.getCurrentPlayer();
    Property currentProperty = gameFlow.getCurrentTile();
    System.out.println("Current Property: " + currentProperty);//for checking
    if (currentProperty != null && currentProperty instanceof ClubProperty) {
        ClubProperty property = (ClubProperty) currentProperty;
        if (property.getOwner() == null && currentPlayer.getMoney() >= property.getPrice()) {
            if (property.purchase(currentPlayer)) {
                appendDialogue(currentPlayer.getName() + " bought " + property.getName() + " for $" + property.getPrice());
                updatePlayerInfo();
            } else {
                // If purchase fails for some reason
                appendDialogue(currentPlayer.getName() + " cannot buy " + property.getName() + ".");
            }
        } else {
            appendDialogue("This property cannot be bought by " + currentPlayer.getName() + ".");
        }
    } else {
        appendDialogue("This property cannot be bought.");
    }
    btnBuy.setEnabled(false);
    }//GEN-LAST:event_btnBuyMouseClicked

    private void btnUpgradeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpgradeMouseClicked
        Player currentPlayer = gameFlow.getCurrentPlayer();
    Property currentProperty = gameFlow.getCurrentTile();

    if (currentProperty instanceof ClubProperty property) {
        if (property.getOwner() == currentPlayer && property.canUpgrade(currentPlayer)) {
            int upgradeCost = 100; // Set your upgrade cost

            if (currentPlayer.getMoney() >= upgradeCost) {
                currentPlayer.pay(upgradeCost);
                boolean upgraded = property.upgrade(currentPlayer);

                if (upgraded) {
                    appendDialogue(currentPlayer.getName() + " upgraded " + property.getName() + " to level " + property.getLevel());
                    updatePlayerInfo();
                } else {
                    appendDialogue("Upgrade failed.");
                }
            } else {
                appendDialogue(currentPlayer.getName() + " doesn't have enough money to upgrade.");
            }
        } else {
            appendDialogue("You can only upgrade your own clubs.");
        }
    } else {
        appendDialogue("You cannot upgrade this tile.");
    }

    btnUpgrade.setEnabled(false);
    }//GEN-LAST:event_btnUpgradeMouseClicked
    private void updatePlayerInfo() {
    Player currentPlayer = gameFlow.getCurrentPlayer();
    lblPlayerTurn.setText(currentPlayer.getName());
    lblAllowance.setText("$" + currentPlayer.getMoney());
    txtAreaOrganizationOwned.setText("");
    for (Property p : currentPlayer.getOwnedProperties()) {
        txtAreaOrganizationOwned.append(p.getName() + "\n");
    }

    btnBuy.setEnabled(false);
    btnUpgrade.setEnabled(false);
    Property currentProperty = gameFlow.getCurrentTile();
    if (currentProperty instanceof ClubProperty property) {
        // Enable Buy if unowned and affordable
        if (property.getOwner() == null && currentPlayer.getMoney() >= property.getPrice()) {
            btnBuy.setEnabled(true);
        }
        boolean canUpgrade = property.getOwner() == currentPlayer && property.canUpgrade(currentPlayer);
        btnUpgrade.setEnabled(canUpgrade);
    }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new mainGame().setVisible(true);
        });
    }
    private void appendDialogue(String message) {
    txtAreaGameDialogue.append(message + "\n");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuy;
    private javax.swing.JButton btnEndTurn;
    private javax.swing.JButton btnRollDice;
    private javax.swing.JButton btnUpgrade;
    private javax.swing.JLabel dice1;
    private javax.swing.JLabel dice2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAllowance;
    private javax.swing.JLabel lblAllowanceDisplay;
    private javax.swing.JLabel lblClubs;
    private javax.swing.JLabel lblClubs1;
    private javax.swing.JLabel lblPlayerTurn;
    private javax.swing.JPanel panelGameBoard;
    private javax.swing.JPanel panelPlayerControl;
    private javax.swing.JPanel panelPlayerInfo;
    private javax.swing.JTextArea txtAreaGameDialogue;
    private javax.swing.JTextArea txtAreaOrganizationOwned;
    // End of variables declaration//GEN-END:variables
}
